package com.laytonsmith.tools.docgen.localization;

import com.laytonsmith.PureUtilities.ClassLoading.ClassDiscovery;
import com.laytonsmith.PureUtilities.Common.StreamUtils;
import com.laytonsmith.PureUtilities.Common.TemplateBuilder;
import com.laytonsmith.PureUtilities.Common.UIUtils;
import com.laytonsmith.PureUtilities.DaemonManager;
import com.laytonsmith.PureUtilities.UI.TextDialog;
import com.laytonsmith.abstraction.Implementation;
import com.laytonsmith.core.MSVersion;
import com.laytonsmith.core.MethodScriptFileLocations;
import com.laytonsmith.persistence.DataSourceException;
import com.laytonsmith.persistence.PersistenceNetwork;
import com.laytonsmith.persistence.PersistenceNetworkImpl;
import com.laytonsmith.persistence.ReadOnlyException;
import com.laytonsmith.persistence.io.ConnectionMixinFactory;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * UI supporting localization efforts.
 */
public final class LocalizationUI extends javax.swing.JFrame {

	private boolean unsavedChanges = false;
	private TranslationMaster translations;
	private PersistenceNetwork pn;
	private String azureEndpoint = null;
	private String azureKey = null;
	private String storedLocation = null;
	private final DaemonManager dm = new DaemonManager();

	private List<TranslationMemory> currentSegments;
	private TranslationMemory currentMemory;
	private TranslationSummary.TranslationSummaryEntry currentSummary;

	/**
	 * Creates new form LocalizationUI
	 */
	private LocalizationUI() {
		initComponents();
		setTitle("L10n Interface");
		setStatus("Welcome to the " + getBranding() + " Localization (L10N) UI!"
				+ " To get started, use File->Load... and select your local database.");
		try {
			setIconImage(ImageIO.read(LocalizationUI.class.getResourceAsStream("GearIcon.png")));
		} catch(IOException ex) {
			Logger.getLogger(LocalizationUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		setEntriesEnabled(false);

		segmentsList.addListSelectionListener((ListSelectionEvent lse) -> {
			if(segmentsList.getSelectedIndex() != -1) {
				populateSegment(currentSegments.get(segmentsList.getSelectedIndex()));
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        summaryEligibleForMachineTranslationButtonGroup = new javax.swing.ButtonGroup();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        localeList = new javax.swing.JList<>();
        localeLabel = new javax.swing.JLabel();
        pagesLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pagesList = new javax.swing.JList<>();
        segmentDetailsPanel = new javax.swing.JPanel();
        summaryDataLabel = new javax.swing.JLabel();
        summaryPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        summaryIdField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        summaryEnglishKeyField = new javax.swing.JTextArea();
        summaryEnglishKeyLabel = new javax.swing.JLabel();
        summaryGlobalCommentLabel = new javax.swing.JLabel();
        summaryGlobalCommentField = new javax.swing.JTextField();
        summaryIsUntraslatable = new javax.swing.JCheckBox();
        summaryIsSuspectSegment = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        summaryMachineTranslatableUncategorizedRadioButton = new javax.swing.JRadioButton();
        summaryMachineTranslatableYes = new javax.swing.JRadioButton();
        summaryMachineTranslatableNo = new javax.swing.JRadioButton();
        summaryAppearsOnPagesLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        summaryAppearsOnPagesList = new javax.swing.JList<>();
        summaryWordWrapCheckbox = new javax.swing.JCheckBox();
        segmentDetailsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        segmentsList = new javax.swing.JList<>();
        segmentsLabel = new javax.swing.JLabel();
        filtersLabel = new javax.swing.JLabel();
        showMissingTranslationsCheckbox = new javax.swing.JCheckBox();
        showUncategorizedCheckbox = new javax.swing.JCheckBox();
        topMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        azureKeyMenu = new javax.swing.JMenuItem();
        forkDatabaseMenu = new javax.swing.JMenuItem();
        findSegmentMenu = new javax.swing.JMenuItem();
        jumpToPageMenu = new javax.swing.JMenuItem();
        helpMenuTop = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        statusLabel.setText("label1");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1789, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane1.setViewportView(localeList);

        localeLabel.setText("Locale");

        pagesLabel.setText("Pages");

        jScrollPane2.setViewportView(pagesList);

        segmentDetailsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        summaryDataLabel.setText("Summary Data");

        summaryPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        idLabel.setText("ID");

        summaryIdField.setEditable(false);
        summaryIdField.setToolTipText("ID that uniquely distinguishes this string across time and locales");

        summaryEnglishKeyField.setEditable(false);
        summaryEnglishKeyField.setColumns(20);
        summaryEnglishKeyField.setLineWrap(true);
        summaryEnglishKeyField.setRows(5);
        summaryEnglishKeyField.setToolTipText("Original English word/phrase");
        summaryEnglishKeyField.setWrapStyleWord(true);
        jScrollPane4.setViewportView(summaryEnglishKeyField);

        summaryEnglishKeyLabel.setText("English Key");

        summaryGlobalCommentLabel.setText("Global Comment (English)");

        summaryGlobalCommentField.setToolTipText("Note about this segment to editors of all locales (English only please)");
        summaryGlobalCommentField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                summaryGlobalCommentFieldKeyReleased(evt);
            }
        });

        summaryIsUntraslatable.setText("Is Untranslatable");
        summaryIsUntraslatable.setToolTipText("If selected, this entire segment is not eligible for translation to any locale, for instance due to it being a technical string");
        summaryIsUntraslatable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryIsUntraslatableActionPerformed(evt);
            }
        });

        summaryIsSuspectSegment.setText("Is Suspect Segment");
        summaryIsSuspectSegment.setToolTipText("If there is an error in the original English segment or you don't think it should be in the database at all.");
        summaryIsSuspectSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryIsSuspectSegmentActionPerformed(evt);
            }
        });

        jLabel1.setText("Eligible For Machine Translation");

        summaryEligibleForMachineTranslationButtonGroup.add(summaryMachineTranslatableUncategorizedRadioButton);
        summaryMachineTranslatableUncategorizedRadioButton.setText("Uncategorized");
        summaryMachineTranslatableUncategorizedRadioButton.setToolTipText("The default state for all segments");
        summaryMachineTranslatableUncategorizedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryMachineTranslatableUncategorizedRadioButtonActionPerformed(evt);
            }
        });

        summaryEligibleForMachineTranslationButtonGroup.add(summaryMachineTranslatableYes);
        summaryMachineTranslatableYes.setText("Yes");
        summaryMachineTranslatableYes.setToolTipText("In general, a machine translation will probably be correct");
        summaryMachineTranslatableYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryMachineTranslatableYesActionPerformed(evt);
            }
        });

        summaryEligibleForMachineTranslationButtonGroup.add(summaryMachineTranslatableNo);
        summaryMachineTranslatableNo.setText("No");
        summaryMachineTranslatableNo.setToolTipText("There is some text in this segment that shouldn't be translated, and cannot be automatically translated");
        summaryMachineTranslatableNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryMachineTranslatableNoActionPerformed(evt);
            }
        });

        summaryAppearsOnPagesLabel.setText("Appears on Pages");

        summaryAppearsOnPagesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        summaryAppearsOnPagesList.setToolTipText("Pages this segment appears on. Double click to select the page in the pages list to see it in context.");
        summaryAppearsOnPagesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                summaryAppearsOnPagesListMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(summaryAppearsOnPagesList);

        summaryWordWrapCheckbox.setSelected(true);
        summaryWordWrapCheckbox.setText("Word Wrap");
        summaryWordWrapCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryWordWrapCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout summaryPanelLayout = new javax.swing.GroupLayout(summaryPanel);
        summaryPanel.setLayout(summaryPanelLayout);
        summaryPanelLayout.setHorizontalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel)
                            .addComponent(summaryEnglishKeyLabel)
                            .addComponent(summaryGlobalCommentLabel)
                            .addComponent(summaryWordWrapCheckbox))
                        .addGap(57, 57, 57)
                        .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(summaryIdField)
                            .addComponent(summaryGlobalCommentField)))
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(summaryPanelLayout.createSequentialGroup()
                                .addComponent(summaryIsUntraslatable)
                                .addGap(18, 18, 18)
                                .addComponent(summaryIsSuspectSegment))
                            .addComponent(jLabel1)
                            .addGroup(summaryPanelLayout.createSequentialGroup()
                                .addComponent(summaryMachineTranslatableUncategorizedRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(summaryMachineTranslatableYes)
                                .addGap(18, 18, 18)
                                .addComponent(summaryMachineTranslatableNo)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addComponent(summaryAppearsOnPagesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1060, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        summaryPanelLayout.setVerticalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(summaryIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(summaryPanelLayout.createSequentialGroup()
                        .addComponent(summaryEnglishKeyLabel)
                        .addGap(15, 15, 15)
                        .addComponent(summaryWordWrapCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(summaryGlobalCommentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(summaryGlobalCommentLabel))
                .addGap(18, 18, 18)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(summaryIsUntraslatable)
                    .addComponent(summaryIsSuspectSegment))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(summaryMachineTranslatableUncategorizedRadioButton)
                    .addComponent(summaryMachineTranslatableYes)
                    .addComponent(summaryMachineTranslatableNo))
                .addGap(18, 18, 18)
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(summaryAppearsOnPagesLabel)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout segmentDetailsPanelLayout = new javax.swing.GroupLayout(segmentDetailsPanel);
        segmentDetailsPanel.setLayout(segmentDetailsPanelLayout);
        segmentDetailsPanelLayout.setHorizontalGroup(
            segmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(segmentDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(summaryDataLabel)
                .addContainerGap(1161, Short.MAX_VALUE))
            .addComponent(summaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        segmentDetailsPanelLayout.setVerticalGroup(
            segmentDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(segmentDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(summaryDataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        segmentDetailsLabel.setText("Segment Details");

        jScrollPane3.setViewportView(segmentsList);

        segmentsLabel.setText("Segments");

        filtersLabel.setText("Filters");

        showMissingTranslationsCheckbox.setText("Show Missing Translations");
        showMissingTranslationsCheckbox.setToolTipText("Shows only segments that are missing either a machine translation or a manual translation, and therefore appear in English on the page");

        showUncategorizedCheckbox.setText("Show Uncategorized");
        showUncategorizedCheckbox.setToolTipText("Shows only segments that have not been marked as machine translatable or not");

        fileMenu.setText("File");

        loadMenu.setText("Load...");
        loadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        topMenu.add(fileMenu);

        toolsMenu.setText("Tools");

        azureKeyMenu.setText("Add Azure Key...");
        azureKeyMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azureKeyMenuActionPerformed(evt);
            }
        });
        toolsMenu.add(azureKeyMenu);

        forkDatabaseMenu.setText("Fork Database...");
        forkDatabaseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forkDatabaseMenuActionPerformed(evt);
            }
        });
        toolsMenu.add(forkDatabaseMenu);

        findSegmentMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findSegmentMenu.setText("Find Segment...");
        findSegmentMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findSegmentMenuActionPerformed(evt);
            }
        });
        toolsMenu.add(findSegmentMenu);

        jumpToPageMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        jumpToPageMenu.setText("Jump to Page");
        jumpToPageMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpToPageMenuActionPerformed(evt);
            }
        });
        toolsMenu.add(jumpToPageMenu);

        topMenu.add(toolsMenu);

        helpMenuTop.setText("Help");

        helpMenu.setText("Help...");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });
        helpMenuTop.add(helpMenu);

        aboutMenu.setText("About...");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        helpMenuTop.add(aboutMenu);

        topMenu.add(helpMenuTop);

        setJMenuBar(topMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pagesLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(segmentsLabel)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filtersLabel)
                    .addComponent(showMissingTranslationsCheckbox)
                    .addComponent(showUncategorizedCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(segmentDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(segmentDetailsLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localeLabel)
                    .addComponent(pagesLabel)
                    .addComponent(segmentDetailsLabel)
                    .addComponent(segmentsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(segmentDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtersLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showMissingTranslationsCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showUncategorizedCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuActionPerformed
        JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fc.showOpenDialog(LocalizationUI.this);
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			initializeTranslationDb(file);
		}
    }//GEN-LAST:event_loadMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        if(!unsavedChanges) {
			System.exit(0);
		} else {
			Object[] options = {"Quit anyways",
				"Resume editing"};
			int n = JOptionPane.showOptionDialog(this,
					"You have unsaved changes, are you sure you want to quit?",
					"Unsaved changes",
					JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE,
					null, //do not use a custom Icon
					options, //the titles of buttons
					options[0]); //default button title
			if(n == 0) {
				System.exit(0);
			}
		}
    }//GEN-LAST:event_exitMenuActionPerformed

    private void azureKeyMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azureKeyMenuActionPerformed
        AzureKeyInputDialog d = new AzureKeyInputDialog(LocalizationUI.this, this.azureEndpoint,
				(endpoint, key, save) -> {
			LocalizationUI.this.azureKey = key;
			LocalizationUI.this.azureEndpoint = endpoint;
			if(save) {
				if(pn != null) {
					try {
						pn.set(dm, new String[]{"l10n", "azureEndpoint"}, endpoint);
						pn.set(dm, new String[]{"l10n", "azureKey"}, key);
					} catch(DataSourceException | ReadOnlyException | IOException | IllegalArgumentException ex) {
						showError("Could not save Azure Key! " + ex.getMessage());
					}
				}
			}
		});
		UIUtils.centerWindowOnWindow(d, LocalizationUI.this);
		d.setVisible(true);
    }//GEN-LAST:event_azureKeyMenuActionPerformed

    private void forkDatabaseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forkDatabaseMenuActionPerformed
        if(unsavedChanges) {
			showError("You have unsaved changes, cannot create a new fork now!");
			return;
		}
		showError("Not yet implemented!");
    }//GEN-LAST:event_forkDatabaseMenuActionPerformed

    private void findSegmentMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findSegmentMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findSegmentMenuActionPerformed

    private void jumpToPageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpToPageMenuActionPerformed
        List<String> pages = translations.getPages();
		new FindDialog(this, new FindDialog.SearchModel() {
			@Override
			public void selectedEntry(int index) {
				pagesList.setSelectedIndex(index + 1);
				pagesList.ensureIndexIsVisible(index + 1);
			}

			@Override
			public List<String> getEntrySet() {
				return pages;
			}

			@Override
			public String getDialogTitle() {
				return "Find Page";
			}
		}).setVisible(true);
    }//GEN-LAST:event_jumpToPageMenuActionPerformed

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
        TemplateBuilder builder = new TemplateBuilder();
		builder.addTemplate("wiki", new TemplateBuilder.Generator() {

			@Override
			public String generate(String... args) {
				return "https://methodscript.com/docs/" + MSVersion.LATEST + "/" + args[0] + ".html";
			}
		});
		String text = builder.build(StreamUtils.GetString(LocalizationUI.class
				.getResourceAsStream("HelpDialog.html")));
		TextDialog td = new TextDialog(LocalizationUI.this, false, text);
		UIUtils.centerWindowOnWindow(td, LocalizationUI.this);
		td.setVisible(true);
    }//GEN-LAST:event_helpMenuActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        TemplateBuilder builder = new TemplateBuilder();
		builder.addTemplate("version", new TemplateBuilder.Generator() {

			@Override
			public String generate(String... args) {
				return MSVersion.LATEST.toString();
			}
		});
		builder.addTemplate("implementation", new TemplateBuilder.Generator() {

			@Override
			public String generate(String... args) {
				return getBranding();
			}
		});

		String text = builder.build(StreamUtils.GetString(LocalizationUI.class
				.getResourceAsStream("AboutDialog.html")));
		TextDialog td = new TextDialog(LocalizationUI.this, true, text);
		UIUtils.centerWindowOnWindow(td, LocalizationUI.this);
		td.setVisible(true);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void summaryGlobalCommentFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_summaryGlobalCommentFieldKeyReleased
        updateCurrent();
    }//GEN-LAST:event_summaryGlobalCommentFieldKeyReleased

    private void summaryIsUntraslatableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryIsUntraslatableActionPerformed
        updateCurrent();
		boolean isUntranslatable = summaryIsUntraslatable.isSelected();
		UIUtils.setEnabled(!isUntranslatable, summaryMachineTranslatableNo,
				summaryMachineTranslatableUncategorizedRadioButton, summaryMachineTranslatableYes);
    }//GEN-LAST:event_summaryIsUntraslatableActionPerformed

    private void summaryIsSuspectSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryIsSuspectSegmentActionPerformed
        updateCurrent();
    }//GEN-LAST:event_summaryIsSuspectSegmentActionPerformed

    private void summaryMachineTranslatableUncategorizedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryMachineTranslatableUncategorizedRadioButtonActionPerformed
        updateCurrent();
    }//GEN-LAST:event_summaryMachineTranslatableUncategorizedRadioButtonActionPerformed

    private void summaryMachineTranslatableYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryMachineTranslatableYesActionPerformed
        updateCurrent();
    }//GEN-LAST:event_summaryMachineTranslatableYesActionPerformed

    private void summaryMachineTranslatableNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryMachineTranslatableNoActionPerformed
        updateCurrent();
    }//GEN-LAST:event_summaryMachineTranslatableNoActionPerformed

    private void summaryWordWrapCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryWordWrapCheckboxActionPerformed
        boolean b = summaryWordWrapCheckbox.isSelected();
		summaryEnglishKeyField.setLineWrap(b);
    }//GEN-LAST:event_summaryWordWrapCheckboxActionPerformed

    private void summaryAppearsOnPagesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_summaryAppearsOnPagesListMouseClicked
		if(evt.getClickCount() == 2) {
			String currentSegment = currentMemory.getEnglishKey();
			String page = summaryAppearsOnPagesList.getSelectedValue();
			pagesList.setSelectedValue(page, true);
			segmentsList.setSelectedValue(currentSegment, true);
		}
    }//GEN-LAST:event_summaryAppearsOnPagesListMouseClicked

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		launch(null);
	}

	public static void launch(String database) {
		Implementation.forceServerType(Implementation.Type.SHELL);
		ClassDiscovery.getDefaultInstance()
				.addDiscoveryLocation(ClassDiscovery.GetClassContainer(LocalizationUI.class));
		File f;
		if(database != null) {
			f = new File(database);
			if(!f.exists()) {
				System.err.println(f.getAbsolutePath() + " does not point to an existing directory!");
				System.exit(1);
			}
			if(!f.isDirectory()) {
				System.err.println(f.getAbsolutePath() + " does not point to a directory!");
				System.exit(1);
			}
		} else {
			f = null;
		}
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc="Look and feel setting code">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch(ClassNotFoundException | InstantiationException | IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			Logger.getLogger(LocalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		LocalizationUI ui = new LocalizationUI();
		ui.initialize();

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				UIUtils.centerWindow(ui);
				Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
				Insets scnMax = Toolkit.getDefaultToolkit().getScreenInsets(ui.getGraphicsConfiguration());
				int taskBarSize = scnMax.bottom;
				ui.setSize((int) Math.min(screenSize.getWidth(), ui.getWidth()),
						(int) Math.min(screenSize.getHeight() - taskBarSize, ui.getHeight()));
				ui.setVisible(true);
				if(f != null) {
					ui.initializeTranslationDb(f);
				} else if(ui.storedLocation != null) {
					ui.initializeTranslationDb(new File(ui.storedLocation));
				}
			}
		});
	}

	private static PersistenceNetwork getPersistenceNetwork(File config) throws URISyntaxException, IOException,
			DataSourceException {
		ConnectionMixinFactory.ConnectionMixinOptions options = new ConnectionMixinFactory.ConnectionMixinOptions();
		options.setWorkingDirectory(config.getParentFile().getParentFile());
		return new PersistenceNetworkImpl(config, new URI("sqlite://" + new File(config.getParentFile().getParentFile(),
				"persistence.db").toString().replace('\\', '/')), options);
	}

	private void initialize() {

		try {
			pn = getPersistenceNetwork(MethodScriptFileLocations.getDefault().getPersistenceConfig());
			if(pn != null) {
				storedLocation = pn.get(new String[]{"l10n", "lastLoadedDb"});
				azureEndpoint = pn.get(new String[]{"l10n", "azureEndpoint"});
				azureKey = pn.get(new String[]{"l10n", "azureKey"});
			}
		} catch(URISyntaxException | IOException | DataSourceException ex) {
			showError("Could not load Persistence Database! " + ex.getMessage());
		}

		this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		this.addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				if(unsavedChanges) {
					int sel = JOptionPane.showConfirmDialog(LocalizationUI.this,
							"You have unsaved changes, are you sure you wish to quit?", "Confirm",
							JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
					if(sel == JOptionPane.YES_OPTION) {
						System.exit(0);
					}
				} else {
					System.exit(0);
				}
			}

		});

		setInvalidMenus(false);
	}

	/**
	 * Sets menu options to the specified value. These are set to false initially, and then once a
	 * translation model is loaded, set to true.
	 * @param to
	 */
	private void setInvalidMenus(boolean to) {
		findSegmentMenu.setEnabled(to);
		jumpToPageMenu.setEnabled(to);
	}

	private void setEntriesEnabled(boolean enabled) {
		UIUtils.setEnabled(enabled, summaryGlobalCommentField,
				summaryIsUntraslatable, summaryIsSuspectSegment, summaryMachineTranslatableUncategorizedRadioButton,
				summaryMachineTranslatableYes, summaryMachineTranslatableNo, summaryAppearsOnPagesList);
	}

	private void showError(String text) {
		JOptionPane.showMessageDialog(LocalizationUI.this,
			text,
			"Error",
			JOptionPane.ERROR_MESSAGE);
	}

	private String getBranding() {
		try {
			return Implementation.GetServerType().getBranding();
		} catch(Exception ex) {
			return "MethodScript";
		}
	}

	private void initializeTranslationDb(File path) {
		new Thread(() -> {
			try {
				translations = new TranslationMaster(path);
				if(pn != null) {
					try {
						pn.set(dm, new String[]{"l10n", "lastLoadedDb"}, path.getAbsolutePath());
					} catch(DataSourceException | ReadOnlyException | IllegalArgumentException ex) {
						Logger.getLogger(LocalizationUI.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
			} catch(IOException ex) {
				EventQueue.invokeLater(() -> {
					showError("Could not load database: " + ex.getMessage());
				});
				return;
			}
			EventQueue.invokeLater(this::initializeUIFromDatabase);
		}, "Initialize-Translations").start();
		setStatus("Loading translations from " + path + ", please wait...");
	}

	private void initializeUIFromDatabase() {
		setStatus("Finished.");
		localeList.setModel(new ListModel<String>(){
			@Override
			public int getSize() {
				return translations.getLocales().size() + 1;
			}

			@Override
			public String getElementAt(int index) {
				if(index == 0) {
					return "All Locales";
				}
				return translations.getLocales().get(index - 1);
			}

			@Override
			public void addListDataListener(ListDataListener l) {}

			@Override
			public void removeListDataListener(ListDataListener l) {}

		});
		localeList.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO
			}

		});

		pagesList.setModel(new ListModel<String>(){
			@Override
			public int getSize() {
				return translations.getPages().size() + 1;
			}

			@Override
			public String getElementAt(int index) {
				if(index == 0) {
					return "All Pages";
				}
				return translations.getPages().get(index - 1);
			}

			@Override
			public void addListDataListener(ListDataListener l) {}

			@Override
			public void removeListDataListener(ListDataListener l) {}

		});

		pagesList.addListSelectionListener((ListSelectionEvent lse) -> {
			setupSegmentsList();
		});

		localeList.setSelectedIndex(0);
		pagesList.setSelectedIndex(0);

		setInvalidMenus(true);
	}

	private void setupSegmentsList() {
		int index = pagesList.getSelectedIndex();
		String locale = localeList.getSelectedValue();
		if(localeList.getSelectedIndex() == 0) {
			locale = "art";
		}
		if(index == 0) {
			// All segments
			currentSegments = translations.getMemoriesForLocale(locale);
		} else {
			// Single page
			index = index - 1;
			String page = translations.getPages().get(index);
			currentSegments = translations.getMemoriesForPage(locale, page);
		}

		// TODO Filter out values based on the checkbox filters

		Collections.sort(currentSegments, (t, t1) -> {
			return t.getEnglishKey().compareTo(t1.getEnglishKey());
		});

		segmentsList.setModel(new ListModel<String>() {
			@Override
			public int getSize() {
				return currentSegments.size();
			}

			@Override
			public String getElementAt(int i) {
				TranslationMemory m = currentSegments.get(i);
				return m.getEnglishKey();
			}

			@Override
			public void addListDataListener(ListDataListener ll) {}

			@Override
			public void removeListDataListener(ListDataListener ll) {}
		});

		segmentsList.setSelectedIndex(0);
	}

	private void populateSegment(TranslationMemory tm) {
		TranslationSummary.TranslationSummaryEntry summary = translations.getSummaryForKey(tm.getEnglishKey());
		currentMemory = tm;
		currentSummary = summary;
		summaryIdField.setText(Integer.toString(summary.getId()));
		summaryEnglishKeyField.setText(summary.getEnglishKey());
		summaryGlobalCommentField.setText(summary.getComment());
		summaryIsUntraslatable.setSelected(summary.isUntranslatable());
		summaryIsSuspectSegment.setSelected(summary.isSuspectSegment());
		Boolean eFMT = summary.getEligibleForMachineTranslation();
		if(eFMT == null) {
			summaryMachineTranslatableUncategorizedRadioButton.setSelected(true);
		} else if(eFMT) {
			summaryMachineTranslatableYes.setSelected(true);
		} else {
			summaryMachineTranslatableNo.setSelected(true);
		}

		summaryAppearsOnPagesList.setModel(buildListModel(Arrays.asList("Discovering...")));
		summaryAppearsOnPagesList.setEnabled(false);

		new Thread(() -> {
			TranslationMemory myTM = tm;
			List<String> pages = new ArrayList<>();
			for(String page : translations.getPages()) {
				for(TranslationMemory tt : translations.getMemoriesForPage("art", page)) {
					if(tt.getId() == tm.getId()) {
						pages.add(page);
					}
				}
			}
			EventQueue.invokeLater(() -> {
				if(tm == myTM) {
					summaryAppearsOnPagesList.setModel(buildListModel(pages));
					summaryAppearsOnPagesList.setEnabled(true);
				}
			});
		}, "FindPagesThread").start();

		setEntriesEnabled(true);
	}

	private void updateCurrent() {
		unsavedChanges = true;
		setTitle("* L10N Interface");
		{
			// Summary
			currentSummary.setComment(summaryGlobalCommentField.getText());
			currentSummary.setSuspectSegment(summaryIsSuspectSegment.isSelected());
			currentSummary.setUntranslatable(summaryIsUntraslatable.isSelected());
			Boolean eFMT;
			if(summaryMachineTranslatableYes.isSelected()) {
				eFMT = true;
			} else if(summaryMachineTranslatableNo.isSelected()) {
				eFMT = false;
			} else {
				eFMT = null;
			}
			currentSummary.setEligibleForMachineTranslation(eFMT);
		}
	}

	private ListModel<String> buildListModel(List<String> list) {
		return new ListModel<String>() {
			@Override
			public int getSize() {
				return list.size();
			}

			@Override
			public String getElementAt(int i) {
				return list.get(i);
			}

			@Override
			public void addListDataListener(ListDataListener ll) {}

			@Override
			public void removeListDataListener(ListDataListener ll) {}
		};
	}

	private void setStatus(String status) {
		// TODO
		EventQueue.invokeLater(() -> {
			statusLabel.setText(status);
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JMenuItem azureKeyMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel filtersLabel;
    private javax.swing.JMenuItem findSegmentMenu;
    private javax.swing.JMenuItem forkDatabaseMenu;
    private javax.swing.JMenuItem helpMenu;
    private javax.swing.JMenu helpMenuTop;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuItem jumpToPageMenu;
    private javax.swing.JMenuItem loadMenu;
    private javax.swing.JLabel localeLabel;
    private javax.swing.JList<String> localeList;
    private javax.swing.JLabel pagesLabel;
    private javax.swing.JList<String> pagesList;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JLabel segmentDetailsLabel;
    private javax.swing.JPanel segmentDetailsPanel;
    private javax.swing.JLabel segmentsLabel;
    private javax.swing.JList<String> segmentsList;
    private javax.swing.JCheckBox showMissingTranslationsCheckbox;
    private javax.swing.JCheckBox showUncategorizedCheckbox;
    private java.awt.Label statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel summaryAppearsOnPagesLabel;
    private javax.swing.JList<String> summaryAppearsOnPagesList;
    private javax.swing.JLabel summaryDataLabel;
    private javax.swing.ButtonGroup summaryEligibleForMachineTranslationButtonGroup;
    private javax.swing.JTextArea summaryEnglishKeyField;
    private javax.swing.JLabel summaryEnglishKeyLabel;
    private javax.swing.JTextField summaryGlobalCommentField;
    private javax.swing.JLabel summaryGlobalCommentLabel;
    private javax.swing.JTextField summaryIdField;
    private javax.swing.JCheckBox summaryIsSuspectSegment;
    private javax.swing.JCheckBox summaryIsUntraslatable;
    private javax.swing.JRadioButton summaryMachineTranslatableNo;
    private javax.swing.JRadioButton summaryMachineTranslatableUncategorizedRadioButton;
    private javax.swing.JRadioButton summaryMachineTranslatableYes;
    private javax.swing.JPanel summaryPanel;
    private javax.swing.JCheckBox summaryWordWrapCheckbox;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuBar topMenu;
    // End of variables declaration//GEN-END:variables
}
