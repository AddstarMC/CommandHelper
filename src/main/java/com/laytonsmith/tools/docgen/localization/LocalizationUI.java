package com.laytonsmith.tools.docgen.localization;

import com.laytonsmith.PureUtilities.Common.StreamUtils;
import com.laytonsmith.PureUtilities.Common.TemplateBuilder;
import com.laytonsmith.PureUtilities.Common.UIUtils;
import com.laytonsmith.PureUtilities.UI.TextDialog;
import com.laytonsmith.abstraction.Implementation;
import com.laytonsmith.core.MSVersion;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * UI supporting localization efforts.
 */
public final class LocalizationUI extends javax.swing.JFrame {

	private boolean unsavedChanges = false;
	private TranslationMaster translations;

	/**
	 * Creates new form LocalizationUI
	 */
	private LocalizationUI() {
		initComponents();
		setTitle("L10n Interface");
		setStatus("Welcome to the " + getBranding() + " Localization (L10N) UI!"
				+ " To get started, use File->Load... and select your local database.");
		try {
			setIconImage(ImageIO.read(LocalizationUI.class.getResourceAsStream("GearIcon.png")));
		} catch(IOException ex) {
			Logger.getLogger(LocalizationUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        statusLabel = new java.awt.Label();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        statusLabel.setText("label1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1789, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("File");

        loadMenu.setText("Load...");
        jMenu1.add(loadMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        jMenu1.add(saveMenu);

        exitMenu.setText("Exit");
        jMenu1.add(exitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        helpMenu.setText("Help...");
        jMenu2.add(helpMenu);

        aboutMenu.setText("About...");
        jMenu2.add(aboutMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 994, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		launch(null);
	}

	public static void launch(String database) {
		File f;
		if(database != null) {
			f = new File(database);
			if(!f.exists()) {
				System.err.println(f.getAbsolutePath() + " does not point to an existing directory!");
				System.exit(1);
			}
			if(!f.isDirectory()) {
				System.err.println(f.getAbsolutePath() + " does not point to a directory!");
				System.exit(1);
			}
		} else {
			f = null;
		}
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc="Look and feel setting code">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch(ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(LocalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch(InstantiationException ex) {
			java.util.logging.Logger.getLogger(LocalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch(IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(LocalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch(javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(LocalizationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		LocalizationUI ui = new LocalizationUI();
		ui.initializeActions();

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				UIUtils.centerWindow(ui);
				ui.setVisible(true);
				if(f != null) {
					ui.initializeTranslationDb(f);
				}
			}
		});
	}

	private void initializeActions() {

		this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		this.addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				if(unsavedChanges) {
					int sel = JOptionPane.showConfirmDialog(LocalizationUI.this,
							"You have unsaved changes, are you sure you wish to quit?", "Confirm",
							JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
					if(sel == JOptionPane.YES_OPTION) {
						System.exit(0);
					}
				} else {
					System.exit(0);
				}
			}

		});
		exitMenu.addActionListener((ActionEvent ae) -> {
			if(!unsavedChanges) {
				System.exit(0);
			} else {
				Object[] options = {"Quit anyways",
					"Resume editing"};
				int n = JOptionPane.showOptionDialog(this,
						"You have unsaved changes, are you sure you want to quit?",
						"Unsaved changes",
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE,
						null, //do not use a custom Icon
						options, //the titles of buttons
						options[0]); //default button title
				if(n == 0) {
					System.exit(0);
				}
			}
		});

		aboutMenu.addActionListener((ae) -> {
			TemplateBuilder builder = new TemplateBuilder();
			builder.addTemplate("version", new TemplateBuilder.Generator() {

				@Override
				public String generate(String... args) {
					return MSVersion.LATEST.toString();
				}
			});
			builder.addTemplate("implementation", new TemplateBuilder.Generator() {

				@Override
				public String generate(String... args) {
					return getBranding();
				}
			});

			String text = builder.build(StreamUtils.GetString(LocalizationUI.class
					.getResourceAsStream("AboutDialog.html")));
			TextDialog td = new TextDialog(LocalizationUI.this, true, text);
			UIUtils.centerWindowOnWindow(td, LocalizationUI.this);
			td.setVisible(true);
		});

		helpMenu.addActionListener((ae) -> {
			TemplateBuilder builder = new TemplateBuilder();
			builder.addTemplate("wiki", new TemplateBuilder.Generator() {

				@Override
				public String generate(String... args) {
					return "https://methodscript.com/docs/" + MSVersion.LATEST + "/" + args[0] + ".html";
				}
			});
			String text = builder.build(StreamUtils.GetString(LocalizationUI.class
					.getResourceAsStream("HelpDialog.html")));
			TextDialog td = new TextDialog(LocalizationUI.this, false, text);
			UIUtils.centerWindowOnWindow(td, LocalizationUI.this);
			td.setVisible(true);
		});

		loadMenu.addActionListener((ae) -> {
			JFileChooser fc = new JFileChooser();
			fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			int returnVal = fc.showOpenDialog(LocalizationUI.this);
			if(returnVal == JFileChooser.APPROVE_OPTION) {
				File file = fc.getSelectedFile();
//				System.out.println(file.getAbsolutePath());
				initializeTranslationDb(file);
			}
		});

	}

	private String getBranding() {
		try {
			return Implementation.GetServerType().getBranding();
		} catch(Exception ex) {
			return "MethodScript";
		}
	}

	private void initializeTranslationDb(File path) {
		new Thread(() -> {
			try {
				translations = new TranslationMaster(path);
			} catch(IOException ex) {
				EventQueue.invokeLater(() -> {
					JOptionPane.showMessageDialog(LocalizationUI.this,
						"Could not load database: " + ex.getMessage(),
						"Error",
						JOptionPane.ERROR_MESSAGE);
				});
				return;
			}
			EventQueue.invokeLater(this::initializeUIFromDatabase);
		}, "Initialize-Translations").start();
		setStatus("Loading translations from " + path + ", please wait...");
	}

	private void initializeUIFromDatabase() {

	}

	private void setStatus(String status) {
		// TODO
		EventQueue.invokeLater(() -> {
			statusLabel.setText(status);
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenuItem helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem loadMenu;
    private javax.swing.JMenuItem saveMenu;
    private java.awt.Label statusLabel;
    // End of variables declaration//GEN-END:variables
}
