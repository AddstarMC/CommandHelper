package com.laytonsmith.tools.pnviewer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;

/**
 *
 */


public class ConfigurationLoaderDialog extends javax.swing.JDialog {

	private LoaderDialogFinish finishAction = null;

	/**
	 * Creates new form ConfigurationLoaderDialog
	 */
	public ConfigurationLoaderDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		setTitle("Load configuration...");
		setRemoteEnabled(false);
		ActionListener radioButtonChangedActionListener = new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				boolean isLocal = false;
				if(localOrRemoteGroup.getSelection() == localRadioButton.getModel()){
					isLocal = true;
				}
				setLocalEnabled(isLocal);
				setRemoteEnabled(!isLocal);
			}
		};
		localRadioButton.addActionListener(radioButtonChangedActionListener);
		remoteRadioButton.addActionListener(radioButtonChangedActionListener);

		loadButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if(validateFields()){
					ConfigurationLoaderDialog.this.setVisible(false);
					if(finishAction != null){
						finishAction.data(localOrRemoteGroup.isSelected(localRadioButton.getModel()),
								localFileField.getText(), usernameField.getText(),
								new String(passwordField.getPassword()), privateKeyField.getText(),
								knownHostsField.getText(), remoteFileField.getText());
					}
					ConfigurationLoaderDialog.this.dispose();
				} else {
					JOptionPane.showMessageDialog(ConfigurationLoaderDialog.this, getValidationError(), "Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		});

		cancelButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				ConfigurationLoaderDialog.this.setVisible(false);
				ConfigurationLoaderDialog.this.dispose();
			}
		});
		registerShowFileLoader(localFileField, browseLocalFileButton);
		registerShowFileLoader(knownHostsField, browseKnownHostsFileButton);
		registerShowFileLoader(privateKeyField, browsePrivateKeyButton);
	}

	/**
	 * Registers and handles a file chooser field/button combo.
	 * @param toPopulate
	 * @param browseButton
	 */
	private void registerShowFileLoader(final JTextField toPopulate, JButton browseButton){
		browseButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JFileChooser fc = new JFileChooser();
				int returnVal = fc.showOpenDialog(ConfigurationLoaderDialog.this);
				if(returnVal == JFileChooser.APPROVE_OPTION){
					File file = fc.getSelectedFile();
					toPopulate.setText(file.getAbsolutePath());
				}
			}
		});
	}

	private boolean validateFields(){
		return getValidationError() == null;
	}

	private String getValidationError(){
		//TODO
		return null;
	}

	private void setLocalEnabled(boolean state){
		localFileField.setEnabled(state);
		browseLocalFileButton.setEnabled(state);
	}

	private void setRemoteEnabled(boolean state){
		hostLabel.setEnabled(state);
		hostField.setEnabled(state);
		usernameLabel.setEnabled(state);
		usernameField.setEnabled(state);
		passwordLabel.setEnabled(state);
		passwordField.setEnabled(state);
		privateKeyLabel.setEnabled(state);
		privateKeyField.setEnabled(state);
		browsePrivateKeyButton.setEnabled(state);
		knownHostsLabel.setEnabled(state);
		knownHostsField.setEnabled(state);
		browseKnownHostsFileButton.setEnabled(state);
		remoteFileLabel.setEnabled(state);
		remoteFileField.setEnabled(state);
	}

	public void setLoaderDialogFinish(LoaderDialogFinish finish){
		this.finishAction = finish;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localOrRemoteGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        localRadioButton = new javax.swing.JRadioButton();
        localFileField = new javax.swing.JTextField();
        browseLocalFileButton = new javax.swing.JButton();
        remoteRadioButton = new javax.swing.JRadioButton();
        hostLabel = new javax.swing.JLabel();
        hostField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        privateKeyLabel = new javax.swing.JLabel();
        privateKeyField = new javax.swing.JTextField();
        knownHostsLabel = new javax.swing.JLabel();
        knownHostsField = new javax.swing.JTextField();
        browsePrivateKeyButton = new javax.swing.JButton();
        browseKnownHostsFileButton = new javax.swing.JButton();
        remoteFileLabel = new javax.swing.JLabel();
        remoteFileField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        loadButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Load Configuration from:");

        localOrRemoteGroup.add(localRadioButton);
        localRadioButton.setSelected(true);
        localRadioButton.setText("Local");

        browseLocalFileButton.setText("Browse...");

        localOrRemoteGroup.add(remoteRadioButton);
        remoteRadioButton.setText("Remote");

        hostLabel.setText("Host:");

        usernameLabel.setText("Username:");

        passwordLabel.setText("Password:");

        jLabel5.setText("If private key is specified, this is the passcode");

        privateKeyLabel.setText("Private Key:");

        knownHostsLabel.setText("Known Hosts:");

        browsePrivateKeyButton.setText("Browse...");

        browseKnownHostsFileButton.setText("Browse...");

        remoteFileLabel.setText("Remote File:");

        loadButton.setText("Load");

        cancelButton.setText("Cancel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(localFileField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseLocalFileButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hostLabel)
                            .addComponent(usernameLabel))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hostField)
                            .addComponent(usernameField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordLabel)
                            .addComponent(privateKeyLabel)
                            .addComponent(knownHostsLabel)
                            .addComponent(remoteFileLabel))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordField)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(privateKeyField)
                                    .addComponent(knownHostsField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browsePrivateKeyButton)
                                    .addComponent(browseKnownHostsFileButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 54, Short.MAX_VALUE))
                            .addComponent(remoteFileField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(localRadioButton)
                            .addComponent(jLabel1)
                            .addComponent(remoteRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(localRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLocalFileButton))
                .addGap(18, 18, 18)
                .addComponent(remoteRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostLabel)
                    .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(privateKeyLabel)
                    .addComponent(privateKeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browsePrivateKeyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(knownHostsLabel)
                    .addComponent(knownHostsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseKnownHostsFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remoteFileLabel)
                    .addComponent(remoteFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ConfigurationLoaderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ConfigurationLoaderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ConfigurationLoaderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ConfigurationLoaderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				ConfigurationLoaderDialog dialog = new ConfigurationLoaderDialog(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	public interface LoaderDialogFinish {
		/**
		 * Called when the data in the dialog is submitted.
		 * @param isLocal If the selection is local. If true, username, password, privateKey, knownHosts, and remoteFile
		 * can be ignored. If false, localPath can be ignored.
		 * @param localPath The local path to the configuration file, if isLocal is true
		 * @param username The username for the ssh connection if isLocal is false
		 * @param password The password for the ssh connection, or passcode for the local private key, if isLocal is false
		 * @param privateKey The path to the local private key, if isLocal is false
		 * @param knownHosts The path to the known hosts file, if isLocal is false
		 * @param remoteFile The path to the configuration file on the remote, if isLocal is false
		 */
		void data(boolean isLocal, String localPath, String username, String password, String privateKey, String knownHosts, String remoteFile);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseKnownHostsFileButton;
    private javax.swing.JButton browseLocalFileButton;
    private javax.swing.JButton browsePrivateKeyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField hostField;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField knownHostsField;
    private javax.swing.JLabel knownHostsLabel;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField localFileField;
    private javax.swing.ButtonGroup localOrRemoteGroup;
    private javax.swing.JRadioButton localRadioButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField privateKeyField;
    private javax.swing.JLabel privateKeyLabel;
    private javax.swing.JTextField remoteFileField;
    private javax.swing.JLabel remoteFileLabel;
    private javax.swing.JRadioButton remoteRadioButton;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
